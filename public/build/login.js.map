{"version":3,"sources":["webpack:///./modules/login/component/logout.jsx","webpack:///./modules/login/route.js","webpack:///./modules/login/store/middlewares/auth.js","webpack:///./modules/login/store/reducers/auth.js","webpack:///./modules/login/store/state.js","webpack:///./modules/login/config.js","webpack:///./modules/login/store/api/auth.js","webpack:///./modules/login/store/actions/auth.js","webpack:///./modules/login/component/login.jsx","webpack:///./modules/login/main.jsx"],"names":["confirm","Modal","Logout","title","okText","okType","cancelText","onOk","urlAuth","config","domain","auth","server","setPoint","xhr","XMLHttpRequest","XDomainRequest","open","withCredentials","send","onload","urlMain","api","xhr2","page","login","onCancel","console","log","type","size","onClick","this","handleLogout","Component","path","getComponent","location","cb","require","middleware","store","next","action","startAction","actions","dispatch","promise","result","JSON","parse","responseText","status","message","error","home","onerror","startCurrentUserAction","successCurrentUserAction","data","actionReducers","state","includes","combineForms","current","forgot","createStoreWithMiddleware","applyMiddleware","thunk","createStore","combineReducers","reducers","apiAuthLogin","url","appConfig","formData","FormData","key","append","authLogin","query","Content","Layout","Login","confirmDirty","autoCompleteResult","e","preventDefault","props","form","validateFieldsAndScroll","err","values","Promise","resolve","setTimeout","rule","value","callback","validateFields","force","getFieldDecorator","className","span","offset","wrapperCol","xs","sm","md","lg","onSubmit","handleSubmit","Item","rules","required","whitespace","placeholder","validator","validateToNextPassword","Password","htmlType","React","WrappedRegistrationForm","Form","create","name","connect","bindActionCreators","Inbox","localStore"],"mappings":"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","file":"login.js?hash=0056296f06e0c86cda07","sourcesContent":["'use strict';\n\nimport config from 'config';\n\nimport React, {Component} from 'react';\n\nimport { Modal, Icon, Button } from 'antd';\nconst confirm = Modal.confirm;\n\nexport default class Logout extends Component\n{\n    handleLogout = () => {\n        confirm({\n            title: 'Вы хотите выйти?',\n            okText: 'Да',\n            okType: 'danger',\n            cancelText: 'Нет',\n            onOk() {\n                const urlAuth = config.domain.auth + config.server.setPoint + '/auth/log-out';\n\n                let XHR = (\"onload\" in new XMLHttpRequest()) ? XMLHttpRequest : XDomainRequest;\n                let xhr = new XHR();\n                xhr.open('POST', urlAuth, true);\n                xhr.withCredentials = true;\n                xhr.send();\n                xhr.onload = function() {\n                    const urlMain = config.domain.api + config.server.setPoint + '/auth/log-out';\n                    let XHR2 = (\"onload\" in new XMLHttpRequest()) ? XMLHttpRequest : XDomainRequest;\n                    let xhr2 = new XHR2();\n                    xhr2.open('POST', urlMain, true);\n                    xhr2.withCredentials = true;\n                    xhr2.send();\n                    xhr2.onload = function() {\n                        config.page.login();\n                    }\n                };\n            },\n            onCancel() {\n                console.log('Cancel handle logout');\n            },\n        });\n    };\n\n    render () {\n        return (\n            <Button type=\"danger\" size=\"small\" onClick={this.handleLogout}><Icon type=\"logout\" /> Выход</Button>\n        );\n    }\n}\n","'use strict';\n\nexport default {\n    path: '/login',\n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require('./main').default);\n        });\n    }\n};","'use strict';\n\nimport config from 'config';\n\nconst middleware = store => next => action => {\n    switch (action.type) {\n        case 'AUTH_LOGIN':\n            const [startAction] = action.actions;\n\n            store.dispatch({\n                type: startAction\n            });\n\n            action.promise.onload = function() {\n                let result = JSON.parse(this.responseText);\n\n                switch (action.promise.status) {\n                    case 403:\n                        config.message.error(config.error[action.promise.status]);\n                        break;\n                    case 401:\n                        config.message.error(config.error[action.promise.status]);\n                        break;\n                    case 200:\n                        if (result.status !== 'error') {\n                            config.page.home();\n                        }\n                        break;\n                }\n            };\n\n            action.promise.onerror = function() {\n                config.message.error('Error');\n            };\n            break;\n        case 'AUTH_CURRENT_USER':\n            const [startCurrentUserAction, successCurrentUserAction] = action.actions;\n\n            store.dispatch({\n                type: startCurrentUserAction\n            });\n\n            action.promise.onload = function() {\n                let data = JSON.parse(this.responseText);\n\n                switch (action.promise.status) {\n                    case 403:\n                        config.message.error(config.error[action.promise.status]);\n                        break;\n                    case 401:\n                        config.message.error(config.error[action.promise.status]);\n                        break;\n                    case 200:\n                        if (data.status !== 'error') {\n                            store.dispatch({\n                                type: successCurrentUserAction,\n                                data: data.result\n                            });\n                        }\n                        break;\n                }\n            };\n            break;\n        default:\n            return next(action);\n            break;\n    }\n\n};\n\nexport default middleware;\n","'use strict';\n\nimport {combineForms} from 'react-redux-form';\n\nconst actionReducers = status => (state = [], action) => {\n    if (status.includes(action.type)) {\n        return action.data;\n    } else {\n        return state;\n    }\n};\n\nexport default combineForms({\n    current: actionReducers([\n        'AUTH_CURRENT_USER_LOADED'\n    ]),\n    forgot: actionReducers([\n        'AUTH_AUTH_FORGOT_PASSWORD_LOADED'\n    ]),\n}, 'auth');\n","'use strict';\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n//import createLogger from 'redux-logger';\n\nimport auth   from './middlewares/auth';\n\n//Найдет и загрузит все reducers из папки\nimport * as reducers from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(\n    auth,\n    thunk//, createLogger()\n)(createStore);\n\nexport default createStoreWithMiddleware(combineReducers(reducers));\n","'use strict';\n\nexport default {\n    model: 'auth',\n    api: {\n        auth: 'auth/login',\n    }\n}","'use strict';\n\nimport appConfig from \"config\";\nimport config from \"../../config\";\n\nexport function apiAuthLogin(data)\n{\n    const url = appConfig.domain.auth + appConfig.server.setPoint + config.api.auth;\n\n    const formData = new FormData();\n\n    for (let key in data) {\n        formData.append(key, data[key] );\n    }\n\n    const XHR = (\"onload\" in new XMLHttpRequest()) ? XMLHttpRequest : XDomainRequest;\n\n    const xhr = new XHR();\n\n    xhr.open('POST', url, true);\n    xhr.withCredentials = true;\n\n    xhr.send( formData );\n\n    return xhr;\n}\n","'use strict';\n\nimport {apiAuthLogin} from '../api/auth';\n\nexport function authLogin(query) {\n    return {\n       type: 'AUTH_LOGIN',\n       actions: ['AUTH_LOGIN_LOADING', 'AUTH_LOGIN_LOADED', 'AUTH_LOGIN_LOAD_FAILURE'],\n       promise: apiAuthLogin(query),\n    };\n}\n","'use strict';\n\nimport React from 'react';\nimport Helmet from \"react-helmet\";\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { authLogin } from '../store/actions/auth';\n\nimport {\n    Layout,\n    Form,\n    Input,\n    Row,\n    Col,\n    Button\n} from 'antd';\n\nconst { Content } = Layout;\n\nclass Login extends React.Component\n{\n    state = {\n        confirmDirty: false,\n        autoCompleteResult: [],\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFieldsAndScroll((err, values) => {\n            if (!err) {\n                new Promise((resolve) => {\n                    this.props.authLogin( values );\n                    setTimeout(() => { resolve(true); }, 1000);\n                });\n            }\n        });\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            wrapperCol: {\n                xs: { span: 24 },\n                sm: { span: 24 },\n                md: { span: 14, offset: 5 },\n                lg: { span: 10, offset: 7 },\n            },\n        };\n        const tailFormItemLayout = {\n            wrapperCol: {\n                xs: {\n                    span: 24,\n                    offset: 0,\n                },\n                sm: {\n                    span: 24,\n                    offset: 0,\n                },\n            },\n        };\n\n        return (\n            <Layout className=\"auth\">\n                <Helmet title=\"Авторизация\" />\n                <Content>\n                    <Row className=\"form-box animated fadeInDown\">\n                        <Col span={10} offset={7}>\n                            <h1 className=\"logo-name\">USER</h1>\n                            <h3>Добро пожаловать</h3>\n                        </Col>\n                        <Col span={10} offset={7} >\n                            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n                                <Form.Item>\n                                    {getFieldDecorator('login', {\n                                        rules: [{ required: true, message: 'Впишите логин', whitespace: true }],\n                                    })(<Input placeholder=\"Логин\" />)}\n                                </Form.Item>\n\n                                <Form.Item>\n                                    {getFieldDecorator('password', {\n                                        rules: [\n                                            {\n                                                required: true,\n                                                message: 'Впишите пароль',\n                                            },\n                                            {\n                                                validator: this.validateToNextPassword,\n                                            },\n                                        ],\n                                    })(<Input.Password placeholder=\"Пароль\" />)}\n                                </Form.Item>\n\n                                <Form.Item {...tailFormItemLayout}>\n                                    <Button type=\"primary\" htmlType=\"submit\">\n                                        Войти\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Content>\n            </Layout>\n        );\n    }\n}\n\nconst WrappedRegistrationForm = Form.create({name: 'register'})(Login);\n\nexport default connect(\n    (state) => { return { login: state.auth.login }; },\n    (dispatch) => bindActionCreators({authLogin,dispatch}, dispatch)\n)(WrappedRegistrationForm);\n","'use strict';\n\nimport React, {Component} from 'react';\nimport {Provider} from 'react-redux';\n\nimport localStore from './store/state';\n\nimport Login from './component/login';\n\nimport './less/login.less';\n\nexport default class Inbox extends Component {\n    render() {\n        return (\n            <Provider store={localStore}>\n                <Login />\n            </Provider>\n        );\n    }\n}\n"],"sourceRoot":""}